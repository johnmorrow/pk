{"name":"pk","tagline":"A field extractor command line utility","body":"Do you use lots of shell pipelines and find yourself choosing between _cut_\r\nand _awk_ to select columns from input? _pk_ is designed as a middle-ground\r\ntool; flexible enough to handle variable numbers of delimiters, fixed format\r\nfiles, quoted or escaped delimiters and more.\r\n\r\nUsage\r\n-----\r\n\r\n```shell\r\nUsage: pk [OPTION...] [STRING...]\r\nA field extraction utility\r\n\r\n  -b, --backslash            Backslash escapes delimiters\r\n  -d, --delimiters=STRING    Characters used as input delimiters\r\n  -e, --empty                Allow empty fields\r\n  -E, --excludes[=STRINGS]   Strings excluded from output (separated by :)\r\n  -f, --file=FILE            Read input from file instead of stdin\r\n  -N, --null[=STRING]        Change output text used for empty fields\r\n  -q, --quotes[=STRING]      Ignore delimiters within quotes\r\n  -S, --separator=STRING     Separator used in output text\r\n  -T, --trim                 Trim non-alphanumerics characters before printing\r\n  -?, --help                 Give this help list\r\n      --usage                Give a short usage message\r\n  -V, --version              Print program version\r\n```\r\n\r\nIt may help to remember that when using short flags, lower-case flags\r\nwill affect how the input is processed, for example, changing the field\r\ndelimiters. Upper-case flags will affect the output of pk, for example,\r\nthe output separator or whether tokens are trimmed of alphanumerics.\r\n\r\nExamples\r\n--------\r\n\r\n#### Basic usage\r\n\r\n_pk_ is a tool for grabbing columns from an input stream\r\nand printing them on _stdout_. Each argument represents something\r\nyou would like to see appearing in the output.\r\n\r\nIf an argument string is a positive integer then it is a request\r\nto see that column from the input printed in the output. The first\r\ncolumn in the input stream has an index of 1.\r\n\r\n```shell\r\n$ df | pk 6 5\r\nMounted Use%\r\n/ 9%\r\n/dev 1%\r\n/run 1%\r\n/run/lock 0%\r\n/run/shm 0%\r\n```\r\n\r\nAn argument string can also represent a range of fields.\r\nThe following range formats are supported:\r\n\r\n| Format | Meaning                                                 |\r\n|--------|---------------------------------------------------------|\r\n| X..Y   | Print each field from index X through to index Y        |\r\n| X..    | Print each field from index X through to the last field |\r\n| ..Y    | Print each field from field 1 through to field Y        |\r\n| ..     | Print every field                                       |\r\n\r\nHere are examples of each type of range:\r\n\r\n```shell\r\n$ echo A B C D E | pk 2..4\r\nB C D\r\n$ echo A B C D E | pk 2..\r\nB C D E\r\n$ echo A B C D E | pk ..3\r\nA B C\r\n$ echo A B C D E | pk ..\r\nA B C D E\r\n```\r\n\r\nFinally, any argument that does not appear to be an index or\r\na range is outputted directly. This can be useful for putting\r\ntogether command lines or quick scripts:\r\n\r\n```shell\r\n$ ls -l /etc | pk 9 is owned by 3\r\nadduser.conf is owned by root\r\nalternatives/ is owned by root\r\napparmor/ is owned by root\r\n```\r\n\r\n#### Changing the delimiters\r\n\r\nIn its default mode of operation _pk_ uses both `<tab>` and\r\n`<space>` as delimiter characters. Additionally, multiple delimiters\r\nappearing next to each other in the input stream are treated as\r\na single delimiter. This makes it good for parsing input streams\r\nwhere the columns are separated by varying amounts of whitespace.\r\nMany system tools such as _ps_, _df_, _last_, etc. use this kind\r\nof output.\r\n\r\nBy using the __-d__ flag you can change the set of delimiters. Note\r\nthat the string argument to __-d__ contains a set of characters, each\r\nof which is a delimiter. This is a not a fixed string that separates\r\neach field.\r\n\r\n#### The output separator\r\n\r\nBy default the field specified for printed will be outputed separated\r\nby single spaces. Use the __-S__ flag to change the string that separates\r\noutput fields:\r\n\r\n```shell\r\n$ ps aux | pk -S, 1 2 | head\r\nUSER,PID\r\nroot,1\r\nroot,2\r\nroot,3\r\n```\r\n\r\n#### Fixed format files\r\n\r\nFixed formats, such as */etc/passwd*, can have different delimiters and\r\npossibly contain empty fields. Using the __-e__ flag tells _pk_ that\r\nadjacent delimiter characters in the input line represent empty fields.\r\n\r\n```shell\r\n$ cat /etc/passwd | pk -e -d: 1 7\r\nroot /bin/bash\r\ndaemon /bin/sh\r\nbin /bin/sh\r\nsys /bin/sh\r\n```\r\n\r\n#### Empty fields\r\n\r\nIf you tell _pk_ to print an empty field it will print out the string\r\n*NULL* by default. This can be set to another string using the __-N__ flag.\r\nIf this flag is used without an argument then empty fields are not printed.\r\n\r\nNote that _pk_ will not print trailing empty fields unless you specify\r\nthem directly using their index. i.e. trailing empty fields are not printed\r\nif specified as a range.\r\n\r\n#### Trimming non-alphanumeric fields\r\n\r\nThe __-T__ flags trims non-alphanumeric characters from the left and right side\r\nbefore printing the field to stdout. This is useful removing quotes,\r\nparentheses or other visual delineations.\r\n\r\n```shell\r\n$ echo \"'Example User' <foobar@example.com>\" | pk -T 3\r\nfoobar@example.com\r\n```\r\n\r\n#### Quoting\r\n\r\nSome text formats allow delimiters to be ignored inside quotes.\r\n_pk_ supports simple quoting, that is you can select a single\r\nquote character or a pair (start and end) of characters. Nested\r\nquotes or multiple types of quoting on the same line are not\r\nsupported.\r\n\r\nUse the __-q__ flag to enable quoting support. Double quote is the\r\ndefault quote character:\r\n\r\n```shell\r\n$ cat input\r\n\"Bilbo Baggins\", \"The Hobbit\"\r\n\"Frodo Baggins\", \"The Lord of the Rings\"\r\n$ pk -f input -d\", \" -q 2\r\n\"The Hobbit\"\r\n\"The Lord of the Rings\"\r\n```\r\n\r\nThe quote character can be changed by supplying a one character\r\nargument to the __-q__ flag:\r\n\r\n```shell\r\n$ cat input\r\n'Bilbo Baggins', 'The Hobbit'\r\n'Frodo Baggins', 'The Lord of the Rings'\r\n$ pk -f input -d\", \" -q\"'\" 1\r\n'Bilbo Baggins'\r\n'Frodo Baggins'\r\n```\r\n\r\nA two character argument supplied to the __-q__ flag is used to\r\nspecify the open and close quote characters:\r\n\r\n```shell\r\n$ cat input\r\n(Bilbo Baggins) (The Hobbit)\r\n(Frodo Baggins) (The Lord of the Rings)\r\n$ pk -f input -q\"()\" 1\r\n(Bilbo Baggins)\r\n(Frodo Baggins)\r\n$ pk -f input -q\"()\" -T 1\r\nBilbo Baggins\r\nFrodo Baggins\r\n```\r\n\r\n#### Excludes\r\n\r\nA list of strings that will always be excluded from the output can be supplied\r\nto pk via the __-E__ flag. An example use case for this is when dealing with\r\nlists of servers you may want to automatically strip fully qualified hostnames\r\ndown to their local names before passing on to another process in the pipeline.\r\n\r\n```shell\r\n$ cat input\r\nfoo.example.com 192.168.1.1 active\r\nbar.example.com 192.168.1.2 repair\r\nbaz.example.net 192.168.1.3 active\r\n$ cat input | pk -E.example.com:.example.net 1 3\r\nfoo active\r\nbar repair\r\nbaz active\r\n```\r\n\r\nAlternatively, as this is likely to be a regular request, it can be set using an\r\nenvironment variable. When using the environment variable the __-E__ flag without\r\narguments can be used to ignore the setting. The __-E__ flag used with arguments\r\nwill override the environment variable.\r\n\r\n```shell\r\n$ export PK_EXCLUDES=.example.com:.example.net\r\n$ cat input | pk 1 3\r\nfoo active\r\nbar repair\r\nbaz active\r\n$ cat input | pk -E 1 3\r\nfoo.example.com active\r\nbar.example.com repair\r\nbaz.example.net active\r\n```\r\n\r\nLicensing\r\n---------\r\n\r\nCopyright 2012-Present John Morrow\r\n\r\nI am providing code in this repository to you under an open source license.\r\nBecause this is my personal repository, the license you receive to my code\r\nis from me and not my employer (Facebook).\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}